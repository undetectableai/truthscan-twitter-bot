# Task ID: 8
# Title: Frontend: Dashboard - Display Recent Detections Table
# Status: pending
# Dependencies: 4, 7, 5
# Priority: medium
# Description: Implement an API endpoint in the Cloudflare Worker to serve detection data from D1, and create a table view in the React dashboard to display recent detections.
# Details:
1. In `packages/worker/src/index.ts`, add a GET endpoint `/api/detections` using `itty-router`. 
2. This endpoint should query D1: `SELECT id, tweet_id, timestamp, image_url, detection_score, twitter_handle FROM detections ORDER BY timestamp DESC LIMIT 50;` 
3. Return results as JSON: `return new Response(JSON.stringify(results), { headers: { 'Content-Type': 'application/json' } });` 
4. In the `DashboardPage` React component (`packages/dashboard/src/pages/DashboardPage.tsx`): 
   - Fetch data from `/api/detections` using `useEffect` and `fetch`. 
   - Store data in component state. 
   - Render the data in a table (columns: Tweet Handle, Timestamp, AI Score, Image URL preview if possible). 
   - Format timestamp (e.g., using `date-fns` - `pnpm add date-fns` in dashboard). 
5. Style the table using TailwindCSS.

# Test Strategy:
Run `wrangler dev` (with D1 populated) and the Vite dev server. Access the dashboard. Verify the table populates with data from D1. Check formatting of timestamp and score. Test with empty D1 and with multiple entries. For advanced filtering (optional PRD feature): D1 queries can be extended with WHERE clauses, e.g., `WHERE twitter_handle = ?` or `WHERE detection_score > ?` based on query parameters passed to `/api/detections`.

# Subtasks:
## 1. Implement the API Endpoint [pending]
### Dependencies: None
### Description: Develop the backend API endpoint that provides the required data for the frontend. Ensure the endpoint returns data in the expected format for the React application.
### Details:
Set up the necessary backend route, controller, and data source. Test the endpoint with sample requests to confirm correct data structure and error handling.

## 2. Fetch Data in React [pending]
### Dependencies: 8.1
### Description: Integrate the API endpoint into the React frontend by implementing data fetching logic using fetch or axios within a React component or custom hook.
### Details:
Use useEffect and useState (or a custom hook) to fetch data from the API endpoint on component mount. Handle loading and error states appropriately.

## 3. Format Fetched Data [pending]
### Dependencies: 8.2
### Description: Transform and format the fetched data as needed for display in the table, such as mapping, sorting, or extracting specific fields.
### Details:
Process the raw API response to match the table's data requirements. Implement any necessary data transformation logic before rendering.

## 4. Render Data Table in React [pending]
### Dependencies: 8.3
### Description: Create a React component to render the formatted data in a table layout, ensuring each row and column displays the correct information.
### Details:
Build a table component that receives the formatted data as props and renders it using standard HTML table elements or a UI library.

## 5. Style Table with TailwindCSS [pending]
### Dependencies: 8.4
### Description: Apply TailwindCSS classes to the table and its elements to achieve the desired appearance and responsiveness.
### Details:
Use TailwindCSS utility classes to style the table, headers, rows, and cells. Ensure the table is visually appealing and adapts to different screen sizes.

